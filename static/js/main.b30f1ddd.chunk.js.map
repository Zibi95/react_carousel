{"version":3,"sources":["components/Carousel.tsx","components/LabeledInput.tsx","App.tsx","index.tsx"],"names":["calculateMaxTransition","count","frame","Carousel","state","transition","nextButtonHandler","setState","prevState","calculateTransition","prevButtonHandler","actualTransition","operator","props","step","infinite","images","frameSize","maxTransition","length","result","Math","min","max","isBlocked","button","this","animationDuration","itemWidth","className","style","width","transform","map","image","i","src","alt","type","onClick","disabled","React","Component","LabeledInput","name","label","id","App","handleChange","e","data","target","value","checked","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b30f1ddd.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from 'react';\n\nimport './Carousel.scss';\n\nexport interface CarouselProps {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\ninterface CarouselState {\n  transition: number;\n}\n\nconst calculateMaxTransition = (count: number, frame: number) => {\n  return ((count / frame) * 100) - 100;\n};\n\nexport class Carousel extends React.Component<CarouselProps, CarouselState> {\n  state: Readonly<CarouselState> = {\n    transition: 0,\n  };\n\n  nextButtonHandler = () => {\n    this.setState((prevState) => ({\n      transition: this.calculateTransition(prevState.transition, 1),\n    }));\n  };\n\n  prevButtonHandler = () => {\n    this.setState((prevState) => ({\n      transition: this.calculateTransition(prevState.transition, -1),\n    }));\n  };\n\n  calculateTransition = (actualTransition: number, operator: 1 | -1) => {\n    const { step, infinite, images, frameSize } = this.props;\n    const maxTransition = calculateMaxTransition(images.length, frameSize);\n\n    if (infinite && actualTransition === 0) {\n      return maxTransition;\n    }\n\n    if (infinite && actualTransition === maxTransition) {\n      return 0;\n    }\n\n    const delta = (step / frameSize) * 100 * operator;\n\n    let result = actualTransition + delta;\n    result = Math.min(result, maxTransition);\n    result = Math.max(result, 0);\n\n    return result;\n  };\n\n  isBlocked = (button: 'prev' | 'next') => {\n    const { images, frameSize, infinite} = this.props;\n    const { transition } = this.state;\n\n    if (infinite) {\n      return false;\n    }\n\n    return button === 'next'\n      ? transition === calculateMaxTransition(images.length, frameSize)\n      : transition === 0;\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      animationDuration,\n      itemWidth,\n    } = this.props;\n\n    const { transition } = this.state;\n\n    return (\n      <div className=\"Carousel\">\n        <div className=\"Carousel__wrapper\" style={{ width: frameSize * itemWidth }}>\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translateX(-${transition}%)`,\n              transition: `all ${animationDuration}ms`,\n            }}\n          >\n            {images.map((image, i) => {\n              return (\n                <li key={image}>\n                  <img style={{ width: itemWidth }} src={image} alt={`${i}`} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            onClick={this.prevButtonHandler}\n            disabled={this.isBlocked('prev')}\n            className=\"Carousel__button\"\n          >\n            &larr;\n          </button>\n          <button\n            type=\"button\"\n            onClick={this.nextButtonHandler}\n            data-cy=\"next\"\n            disabled={this.isBlocked('next')}\n            className=\"Carousel__button Carousel__button--next\"\n          >\n            &rarr;\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","/* eslint-disable react/require-default-props */\nimport './LabeledInput.scss';\n\ntype InputProps = {\n  name: string;\n  label:string;\n  value: string | number;\n  type?: string;\n  min?: number;\n  max?: number;\n  checked?: boolean;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n};\n\nexport const LabeledInput = ({\n  type = 'number',\n  name,\n  label,\n  ...props\n}: InputProps) => {\n  return (\n    <label className=\"label\">\n      {label}\n      :\n      <input\n        type={type}\n        id={name}\n        name={name}\n        {...props}\n      />\n    </label>\n\n  );\n};\n","import React from 'react';\n\nimport { Carousel, CarouselProps } from './components/Carousel';\nimport { LabeledInput } from './components/LabeledInput';\n\nimport './App.scss';\n\ntype AppState = CarouselProps;\n\nclass App extends React.Component<{}, AppState> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const data = e.target.type === 'number'\n      ? +e.target.value\n      : e.target.checked;\n\n    this.setState(state => ({\n      ...state,\n      [e.target.name]: data,\n    }));\n  };\n\n  render() {\n    const {\n      images, step, frameSize, itemWidth, animationDuration, infinite,\n    }\n      = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <div className=\"App__inputs\">\n          <LabeledInput\n            name=\"itemWidth\"\n            min={100}\n            max={200}\n            label=\"Item width\"\n            value={itemWidth}\n            onChange={this.handleChange}\n          />\n\n          <LabeledInput\n            name=\"frameSize\"\n            min={1}\n            label=\"Frame Size\"\n            value={frameSize}\n            onChange={this.handleChange}\n          />\n\n          <LabeledInput\n            name=\"step\"\n            min={1}\n            label=\"Step\"\n            value={step}\n            onChange={this.handleChange}\n          />\n\n          <LabeledInput\n            name=\"animationDuration\"\n            label=\"Animation duration\"\n            value={animationDuration}\n            onChange={this.handleChange}\n          />\n\n          <LabeledInput\n            type=\"checkbox\"\n            name=\"infinite\"\n            label=\"Infinite\"\n            value={`${infinite}`}\n            checked={infinite}\n            onChange={this.handleChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}