{"version":3,"sources":["components/Carousel.tsx","components/Input.tsx","App.tsx","index.tsx"],"names":["calculateMaxTransition","count","frame","Carousel","state","transition","nextButtonHandler","setState","prevState","calculateTransition","prevButtonHandler","actualTransition","operation","result","props","step","infinite","images","frameSize","maxTransition","length","isBlocked","button","isEdge","undefined","this","animationDuration","itemWidth","className","style","width","transform","map","image","i","src","alt","type","onClick","disabled","React","Component","Input","name","max","label","min","value","onChange","checked","htmlFor","id","e","data","target","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4df6bc9.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from 'react';\n\nimport { CarouselType } from '../types/Carousel';\n\nimport './Carousel.scss';\n\ntype CarouselProps = CarouselType;\n\ninterface CarouselState {\n  transition: number;\n}\n\nconst calculateMaxTransition = (count: number, frame: number) => {\n  return ((count / frame) * 100) - 100;\n};\n\nexport class Carousel extends React.Component<CarouselProps, CarouselState> {\n  state: Readonly<CarouselState> = {\n    transition: 0,\n  };\n\n  nextButtonHandler = () => {\n    this.setState((prevState) => ({\n      transition: this.calculateTransition(prevState.transition, '+'),\n    }));\n  };\n\n  prevButtonHandler = () => {\n    this.setState((prevState) => ({\n      transition: this.calculateTransition(prevState.transition, '-'),\n    }));\n  };\n\n  calculateTransition = (actualTransition: number, operation: '-' | '+') => {\n    const { step, infinite, images, frameSize } = this.props;\n    const maxTransition = calculateMaxTransition(images.length, frameSize);\n    let result: number;\n\n    if (operation === '-') {\n      result = actualTransition - step / frameSize * 100;\n\n      if (actualTransition === 0 && infinite) {\n        result = maxTransition;\n      } else if (result < 0) {\n        result = 0;\n      }\n    } else {\n      result = actualTransition + step / frameSize * 100;\n\n      if (actualTransition === maxTransition && infinite) {\n        result = 0;\n      } else if (result > maxTransition) {\n        result = maxTransition;\n      }\n    }\n\n    return result;\n  };\n\n  isBlocked = (button: 'prev' | 'next') => {\n    const { images, frameSize, infinite} = this.props;\n    const { transition } = this.state;\n\n    const isEdge = button === 'next'\n      ? transition === calculateMaxTransition(images.length, frameSize)\n      : transition === 0;\n\n    return !infinite && isEdge\n      ? true\n      : undefined;\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      animationDuration,\n      itemWidth,\n    } = this.props;\n\n    const { transition } = this.state;\n\n    return (\n      <div className=\"Carousel\">\n        <div className=\"Carousel__wrapper\" style={{ width: frameSize * itemWidth }}>\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translateX(-${transition}%)`,\n              transition: `all ${animationDuration}ms`,\n            }}\n          >\n            {images.map((image, i) => {\n              return (\n                <li key={image}>\n                  <img style={{ width: itemWidth }} src={image} alt={`${i}`} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            onClick={this.prevButtonHandler}\n            disabled={this.isBlocked('prev')}\n            className=\"Carousel__button\"\n          >\n            &larr;\n          </button>\n          <button\n            type=\"button\"\n            onClick={this.nextButtonHandler}\n            data-cy=\"next\"\n            disabled={this.isBlocked('next')}\n            className=\"Carousel__button Carousel__button--next\"\n          >\n            &rarr;\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","/* eslint-disable react/require-default-props */\nimport './Input.scss';\n\ntype InputProps = {\n  name: string;\n  label:string;\n  value: string | number;\n  type?: string;\n  min?: number;\n  max?: number;\n  checked?: boolean;\n  onChange: (name: string, value: boolean | number) => void\n};\n\nexport const Input = ({\n  type = 'number',\n  name,\n  max = 200,\n  label,\n  min = 1,\n  value,\n  onChange,\n  checked = false,\n}: InputProps) => {\n  return (\n    <div className=\"input\">\n      <label htmlFor={name}>\n        {label}\n        :\n        {' '}\n      </label>\n\n      <input\n        type={type}\n        id={name}\n        name={name}\n        min={min}\n        max={max}\n        value={value}\n        onChange={(e) => {\n          const data = type === 'number'\n            ? +e.target.value\n            : e.target.checked;\n\n          onChange(name, data);\n        }}\n        checked={checked}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Carousel } from './components/Carousel';\nimport { Input } from './components/Input';\n\nimport { CarouselType } from './types/Carousel';\n\nimport './App.scss';\n\ntype State = CarouselType;\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  onChange = (name: string, value: number | boolean) => {\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  render() {\n    const {\n      images, step, frameSize, itemWidth, animationDuration, infinite,\n    }\n      = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <div className=\"App__inputs\">\n          <Input\n            name=\"itemWidth\"\n            min={100}\n            max={200}\n            label=\"Item width\"\n            value={itemWidth}\n            onChange={this.onChange}\n          />\n\n          <Input\n            name=\"frameSize\"\n            min={1}\n            label=\"Frame Size\"\n            value={frameSize}\n            onChange={this.onChange}\n          />\n\n          <Input\n            name=\"step\"\n            min={1}\n            label=\"Step\"\n            value={step}\n            onChange={this.onChange}\n          />\n\n          <Input\n            name=\"animationDuration\"\n            label=\"Animation duration\"\n            value={animationDuration}\n            onChange={this.onChange}\n          />\n\n          <Input\n            type=\"checkbox\"\n            name=\"infinite\"\n            label=\"Infinite\"\n            value={`${infinite}`}\n            checked={infinite}\n            onChange={this.onChange}\n          />\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}